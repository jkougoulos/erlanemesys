-module(probe_store).

-export([start_link/0, stop/0, add_result/2, get_results/1, get_active/0 ]).
-export([get_pstate/1, set_pstate/2, del_pstate/1, get_config/0, del_host_pid/1, add_host_pid/2, get_host_pid/1, get_host_result_count/1 ]).

-export([init/1, handle_call/3, handle_cast/2, handle_info/2, 
		code_change/3, terminate/2]).

-behaviour(gen_server).

-define( KEEP_RESULTS_SECS, 900 ).


get_config() ->
	dets:select( probe_config, [{'$1',[],['$1']}] ).

get_pstate( Host ) ->
	dets:lookup( probe_config, Host ). 

del_pstate( Host ) ->
	gen_server:call(?MODULE, { del_pstate, Host } ).

set_pstate( Host, NewPstate ) ->
	gen_server:call(?MODULE, { set_pstate, { Host, NewPstate } } ).

get_active() ->
	ets:foldl(  fun({Key,_Val} = _X,Acc) -> [Key|Acc] end , [] , host_to_pid ).

start_link() ->
	gen_server:start_link({local,?MODULE}, ?MODULE, [], []).

stop() ->
	gen_server:call(?MODULE, stop).

get_host_result_count( Host ) ->
% MatchFun generated by ets:fun2ms( fun( { Key, _Val } = _X ) when Key =:= Host -> true end  ),
	MatchFun = [{{'$1','$2'},[{'=:=','$1',Host}],[true]}], 
	ets:select_count( probe_store_results, MatchFun ).               

add_result( Host, Result ) ->
	gen_server:call( ?MODULE, { add_result, { Host, Result }} ).

get_results( Host ) ->
	{ ok, ets:lookup( probe_store_results,  Host ) }.

add_host_pid( Host, Pid ) ->
	gen_server:call( ?MODULE, { add_host_pid, { Host, Pid }} ).

del_host_pid( Host ) ->
	gen_server:call( ?MODULE, { del_host_pid,  Host} ).

get_host_pid( Host ) ->
	case ets:lookup( host_to_pid, Host ) of
		[{ _, Pid }] -> {ok, Pid};
		_ -> { error, not_found  }
	end. 

handle_call( { add_result, { Host, Result } }, _From, Tid ) ->
	{ Ms, S, Us }  = os:timestamp(),
	ResultsTTL = { Ms, S - ?KEEP_RESULTS_SECS, Us },
	ToBDeleted = ets:select( probe_store_results, 
					[
					   {{'$1',{result,'$2','$3'}},  
					       [{'=:=','$1',Host},
					       {'<','$2',{const,ResultsTTL}}],
					   [{{'$1',{{result,'$2','$3'}}}}]}]),
	[ ets:delete_object( probe_store_results, Obj ) || Obj <- ToBDeleted ],
	true = ets:insert( probe_store_results, { Host, Result } ),
	{ reply,  ok, Tid };

handle_call( { add_host_pid, { Host, Pid } }, _From, Tid ) ->
	true = ets:insert( host_to_pid, { Host, Pid } ),
	{ reply,  ok, Tid };

handle_call( { del_host_pid, Host }, _From, Tid ) ->
	true = ets:delete( host_to_pid, Host ),
	true = ets:delete( probe_store_results, Host ),
	{ reply,  ok, Tid };

handle_call( { set_pstate, { Host, NewPstate } }, _From, Tid ) ->
	ok = dets:insert( probe_config, { Host, NewPstate } ),
	{ reply,  ok, Tid };

handle_call( { del_pstate, Host }, _From, Tid ) ->
	ok = dets:delete( probe_config, Host ),
	{ reply,  ok, Tid };

handle_call( _Msg, _From, Tid) ->
	{reply, { no_call_match_dear }, Tid }.

handle_cast( _Msg, Tid ) ->
	{reply, { no_cast_match_dear }, Tid }.
 
handle_info( _Msg, Tid ) ->
	{reply, { no_info_match_dear }, Tid }.

init([]) ->
	probe_store_results = ets:new( probe_store_results , [bag,named_table]),
	host_to_pid = ets:new( host_to_pid , [set,named_table]),
	{ ok, probe_config } = dets:open_file( probe_config,[{file, "probe_config.dets"},{type, set}] ),
	{ok, { dummy } }.

code_change(_OldVsn, State, _Extra) ->
		{ok, State}.
 
terminate(_Reason, _State) ->
		dets:close( probe_config ),
		ok.

